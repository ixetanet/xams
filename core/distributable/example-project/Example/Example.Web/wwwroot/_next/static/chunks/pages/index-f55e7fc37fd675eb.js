(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{9536:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return t(6948)}])},6948:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return k}});var a=t(4246),l=t(7378),i=t(625),o=t(9803),s=t(2063),r=t(2815),d=t(2289),c=t(226),m=t(7284),u=t(9513),p=t(1879),h=t(6677);let f=e=>{let n=(0,h.useRouter)();return(0,a.jsx)("div",{className:"cursor-pointer",onClick:()=>{n.push("/?id=".concat(e.example.id)),e.close()},children:e.example.title})};var x=e=>{let[n,t]=(0,p.q)(!1),l=n?"Close navigation":"Open navigation";return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("div",{className:"flex items-center gap-2",children:[(0,a.jsx)(m.O,{opened:n,onClick:t.open,"aria-label":l}),"Navigation"]}),(0,a.jsxs)(u.d,{opened:n,onClose:t.close,size:"xs",title:"",children:[(0,a.jsx)("div",{className:"font-bold",children:"Forms"}),e.formExamples.map((e,n)=>(0,a.jsx)(f,{example:e,close:t.close},n)),(0,a.jsx)("div",{className:"font-bold mt-4",children:"Form Fields"}),e.formFieldsExamples.map((e,n)=>(0,a.jsx)(f,{example:e,close:t.close},n)),(0,a.jsx)("div",{className:"font-bold mt-4",children:"DataTable"}),e.dataTableExamples.map((e,n)=>(0,a.jsx)(f,{example:e,close:t.close},n)),(0,a.jsx)("div",{className:" font-bold mt-4",children:"DataTable Form"}),e.dataTableFormExamples.map((e,n)=>(0,a.jsx)(f,{example:e,close:t.close},n))]})]})},g=t(9572),b=t(9354),j=t(5299),v=t(8579),N=t.n(v),T=e=>{let[n,t]=(0,p.q)(!1);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(c.z,{variant:"light",onClick:t.open,children:"View Code"}),(0,a.jsx)(u.d,{position:"right",size:"xl",opened:n,onClose:t.close,children:e.example})]})},w=t(7711),F=e=>(0,a.jsx)(w.y$,{theme:w.np.vsDark,language:e.language,code:e.codeBlock,children:e=>{let{className:n,style:t,tokens:l,getLineProps:i,getTokenProps:o}=e;return(0,a.jsx)("pre",{style:t,className:" rounded-xl p-4 text-sm shadow",children:(0,a.jsx)("div",{className:" overflow-x-scroll code-scrollbar",children:l.map((e,n)=>(0,a.jsx)("div",{...i({line:e}),children:e.map((e,n)=>(0,a.jsx)("span",{...o({token:e})},n))},n))})})}});(void 0!==t.g?t.g:window).Prism=w.p1,t(551);let B=[{title:"FormBuilder",component:(0,a.jsx)(()=>{let e=(0,i.Z)({tableName:"Widget"});return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The useFormBuilder hook enables the creation of forms using fields defined in your Entity Framework models."}),(0,a.jsx)("p",{children:"To utilize the useFormBuilder hook, specify the table name, pass the formBuilder object to the FormContainer, and use the Field component to render the fields."}),(0,a.jsx)("p",{children:"The SaveButton component will save the form data to the database."}),(0,a.jsx)(o.Z,{formBuilder:e,children:(0,a.jsxs)("div",{className:"w-full",children:[(0,a.jsx)("div",{className:"font-bold",children:"Widget Form"}),(0,a.jsxs)(d.r,{children:[(0,a.jsx)(d.r.Col,{span:6,children:(0,a.jsx)(s.Z,{name:"Name"})}),(0,a.jsx)(d.r.Col,{span:6,children:(0,a.jsx)(s.Z,{name:"Price"})})]}),(0,a.jsx)("div",{className:"w-full flex flex-col pt-4",children:(0,a.jsx)(r.Z,{})})]})})]})},{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { useFormBuilder, FormContainer, Field, SaveButton } from "@ixeta/xams";\nimport { Grid } from "@mantine/core";\nimport React from "react";\n\nconst FormBuilder = () => {\n  const formBuilder = useFormBuilder({\n    tableName: "Widget",\n  });\n  return (\n    <>\n      <p>\n        The useFormBuilder hook enables the creation of forms using fields\n        defined in your Entity Framework models.\n      </p>\n      <p>\n        To utilize the useFormBuilder hook, specify the table name, pass the\n        formBuilder object to the FormContainer, and use the Field component to\n        render the fields.\n      </p>\n      <p>The SaveButton component will save the form data to the database.</p>\n      <FormContainer formBuilder={formBuilder}>\n        <div className="w-full">\n          <div className="font-bold">Widget Form</div>\n          <Grid>\n            <Grid.Col span={6}>\n              <Field name="Name" />\n            </Grid.Col>\n            <Grid.Col span={6}>\n              <Field name="Price" />\n            </Grid.Col>\n          </Grid>\n          <div className="w-full flex flex-col pt-4">\n            <SaveButton />\n          </div>\n        </div>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default FormBuilder;\n',language:"tsx"})]}),{}),id:1e3},{title:"Update",component:(0,a.jsx)(()=>{let e=(0,i.Z)({tableName:"Widget"});return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"After saving the data, the form can be converted into an update form by calling formBuilder.setSnapshot(data) in the onPostSave callback of the SaveButton component."}),(0,a.jsx)(o.Z,{formBuilder:e,children:(0,a.jsxs)("div",{className:"w-full",children:[(0,a.jsx)("div",{className:"font-bold",children:"Widget Form"}),(0,a.jsxs)(d.r,{children:[(0,a.jsx)(d.r.Col,{span:6,children:(0,a.jsx)(s.Z,{name:"Name"})}),(0,a.jsx)(d.r.Col,{span:6,children:(0,a.jsx)(s.Z,{name:"Price"})})]}),(0,a.jsx)("div",{className:"w-full flex flex-col pt-4",children:(0,a.jsx)(r.Z,{onPostSave:(n,t,a)=>{e.setSnapshot(a)}})})]})})]})},{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { useFormBuilder, FormContainer, Field, SaveButton } from "@ixeta/xams";\nimport { Grid } from "@mantine/core";\nimport React from "react";\n\nconst FormBuilderUpdate = () => {\n  const formBuilder = useFormBuilder({\n    tableName: "Widget",\n  });\n  return (\n    <>\n      <p>\n        After saving the data, the form can be converted into an update form by\n        calling formBuilder.setSnapshot(data) in the onPostSave callback of the\n        SaveButton component.\n      </p>\n      <FormContainer formBuilder={formBuilder}>\n        <div className="w-full">\n          <div className="font-bold">Widget Form</div>\n          <Grid>\n            <Grid.Col span={6}>\n              <Field name="Name" />\n            </Grid.Col>\n            <Grid.Col span={6}>\n              <Field name="Price" />\n            </Grid.Col>\n          </Grid>\n          <div className="w-full flex flex-col pt-4">\n            <SaveButton\n              onPostSave={(operation, id, data) => {\n                formBuilder.setSnapshot(data); // Set the record to update\n              }}\n            />\n          </div>\n        </div>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default FormBuilderUpdate;\n',language:"tsx"})]}),{}),id:2e3},{title:"Set Field",component:(0,a.jsx)(()=>{let e=(0,i.Z)({tableName:"Widget"});return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The setField method can be used to set the value of a field in the form."}),(0,a.jsx)(o.Z,{formBuilder:e,children:(0,a.jsxs)("div",{className:"w-full flex flex-col gap-2",children:[(0,a.jsx)("div",{className:"font-bold",children:"Widget Form"}),(0,a.jsxs)(d.r,{children:[(0,a.jsx)(d.r.Col,{span:6,children:(0,a.jsx)(s.Z,{name:"Name"})}),(0,a.jsx)(d.r.Col,{span:6,children:(0,a.jsx)(s.Z,{name:"Price"})})]}),(0,a.jsx)(c.z,{onClick:()=>e.setField("Name","The Widget 3000"),children:"Set Name Field!"}),(0,a.jsx)(r.Z,{})]})})]})},{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { useFormBuilder, FormContainer, Field, SaveButton } from "@ixeta/xams";\nimport { Button, Grid } from "@mantine/core";\nimport React from "react";\n\nconst FormBuilderSetField = () => {\n  const formBuilder = useFormBuilder({\n    tableName: "Widget",\n  });\n  return (\n    <>\n      <p>\n        The setField method can be used to set the value of a field in the form.\n      </p>\n      <FormContainer formBuilder={formBuilder}>\n        <div className="w-full">\n          <div className="font-bold">Widget Form</div>\n          <Grid>\n            <Grid.Col span={6}>\n              <Field name="Name" />\n            </Grid.Col>\n            <Grid.Col span={6}>\n              <Field name="Price" />\n            </Grid.Col>\n          </Grid>\n          <div className="w-full flex gap-2">\n            <Button\n              onClick={() => formBuilder.setField("Name", "The Widget 3000")}\n            >\n              Set Name Field!\n            </Button>\n            <SaveButton />\n          </div>\n        </div>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default FormBuilderSetField;\n',language:"tsx"})]}),{}),id:2500},{title:"Validation",component:(0,a.jsx)(()=>{let e=(0,i.Z)({tableName:"Widget"});return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"Custom form validation can be implemented using the onPreSave callback of the SaveButton component. The onPreSave callback is an asynchronous function that receives the form data as an argument. If the function returns an object with a continue property set to false, the save operation will be aborted."}),(0,a.jsx)("p",{children:"Custom validation messages can be set by calling the setFieldError method of the formBuilder object."}),(0,a.jsx)(o.Z,{formBuilder:e,children:(0,a.jsxs)("div",{className:"w-full",children:[(0,a.jsx)("div",{className:"font-bold",children:"Widget Form"}),(0,a.jsxs)(d.r,{children:[(0,a.jsx)(d.r.Col,{span:6,children:(0,a.jsx)(s.Z,{name:"Name"})}),(0,a.jsx)(d.r.Col,{span:6,children:(0,a.jsx)(s.Z,{name:"Price"})})]}),(0,a.jsx)("div",{className:"w-full flex flex-col pt-4",children:(0,a.jsx)(r.Z,{onPreSave:async n=>""===n.Name?(e.setFieldError("Name","Name is required"),{continue:!1}):{continue:!0},onPostSave:(n,t,a)=>{e.setSnapshot(a)}})})]})})]})},{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { useFormBuilder, FormContainer, Field, SaveButton } from "@ixeta/xams";\nimport { Grid } from "@mantine/core";\nimport React from "react";\n\nconst FormBuilderValidation = () => {\n  const formBuilder = useFormBuilder({\n    tableName: "Widget",\n  });\n  return (\n    <>\n      <p>\n        Custom form validation can be implemented using the onPreSave callback\n        of the SaveButton component. The onPreSave callback is an asynchronous\n        function that receives the form data as an argument. If the function\n        returns an object with a continue property set to false, the save\n        operation will be aborted.\n      </p>\n      <p>\n        Custom validation messages can be set by calling the setFieldError\n        method of the formBuilder object.\n      </p>\n      <FormContainer formBuilder={formBuilder}>\n        <div className="w-full">\n          <div className="font-bold">Widget Form</div>\n          <Grid>\n            <Grid.Col span={6}>\n              <Field name="Name" />\n            </Grid.Col>\n            <Grid.Col span={6}>\n              <Field name="Price" />\n            </Grid.Col>\n          </Grid>\n          <div className="w-full flex flex-col pt-4">\n            <SaveButton\n              onPreSave={async (data) => {\n                // Validate the name field is populated\n                if (data.Name === "") {\n                  formBuilder.setFieldError("Name", "Name is required");\n                  return {\n                    continue: false,\n                  };\n                }\n                return {\n                  continue: true,\n                };\n              }}\n              onPostSave={(operation, id, data) => {\n                formBuilder.setSnapshot(data);\n              }}\n            />\n          </div>\n        </div>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default FormBuilderValidation;\n',language:"tsx"})]}),{}),id:3e3},{title:"Default Fields",component:(0,a.jsx)(()=>{let e=(0,i.Z)({tableName:"Widget",defaults:[{field:"Name",value:"Widget Name"},{field:"Price",value:9.99}]});return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"Using the defaults property, you can set default values for fields in the form."}),(0,a.jsx)(o.Z,{formBuilder:e,children:(0,a.jsxs)("div",{className:"w-full",children:[(0,a.jsx)("div",{className:"font-bold",children:"Widget Form"}),(0,a.jsxs)(d.r,{children:[(0,a.jsx)(d.r.Col,{span:6,children:(0,a.jsx)(s.Z,{name:"Name"})}),(0,a.jsx)(d.r.Col,{span:6,children:(0,a.jsx)(s.Z,{name:"Price"})})]}),(0,a.jsx)("div",{className:"w-full flex flex-col pt-4",children:(0,a.jsx)(r.Z,{})})]})})]})},{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { useFormBuilder, FormContainer, Field, SaveButton } from "@ixeta/xams";\nimport { Grid } from "@mantine/core";\nimport React from "react";\n\nconst FormBuilderDefaults = () => {\n  const formBuilder = useFormBuilder({\n    tableName: "Widget",\n    // Set default values for the form\n    defaults: [\n      {\n        field: "Name",\n        value: "Widget Name",\n      },\n      {\n        field: "Price",\n        value: 9.99,\n      },\n    ],\n  });\n  return (\n    <>\n      <p>\n        Using the defaults property, you can set default values for fields in\n        the form.\n      </p>\n\n      <FormContainer formBuilder={formBuilder}>\n        <div className="w-full">\n          <div className="font-bold">Widget Form</div>\n          <Grid>\n            <Grid.Col span={6}>\n              <Field name="Name" />\n            </Grid.Col>\n            <Grid.Col span={6}>\n              <Field name="Price" />\n            </Grid.Col>\n          </Grid>\n          <div className="w-full flex flex-col pt-4">\n            <SaveButton />\n          </div>\n        </div>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default FormBuilderDefaults;\n',language:"tsx"})]}),{}),id:4e3},{title:"Snapshot",component:(0,a.jsx)(()=>{var e;let n=(0,i.Z)({tableName:"Widget"});return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The snapshot property on the formBuilder is populated if the form is an update operation."}),(0,a.jsx)("p",{children:"It contains the data that was loaded into the form prior to any edits being made."}),(0,a.jsx)("p",{children:"Create a record and observe how the snapshot property is populated with last saved data."}),(0,a.jsx)(o.Z,{formBuilder:n,children:(0,a.jsxs)("div",{className:"w-full flex flex-col gap-2",children:[(0,a.jsx)("div",{className:"font-bold",children:"Widget Form"}),(0,a.jsx)(d.r,{children:(0,a.jsx)(d.r.Col,{span:12,children:(0,a.jsx)(s.Z,{name:"Name"})})}),(0,a.jsxs)("div",{children:["Snapshot Name field: ",null===(e=n.snapshot)||void 0===e?void 0:e.Name]}),(0,a.jsx)("div",{className:"w-full flex flex-col",children:(0,a.jsx)(r.Z,{onPostSave:(e,t,a)=>{n.setSnapshot(a)}})})]})})]})},{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { useFormBuilder, FormContainer, Field, SaveButton } from "@ixeta/xams";\nimport { Grid } from "@mantine/core";\nimport React from "react";\n\nconst FormBuilderSnapshot = () => {\n  const formBuilder = useFormBuilder<any>({\n    tableName: "Widget",\n  });\n  return (\n    <>\n      <p>\n        The snapshot property on the formBuilder is populated if the form is an\n        update operation.\n      </p>\n      <p>\n        It contains the data that was loaded into the form prior to any edits\n        being made.\n      </p>\n      <p>\n        Create a record and observe how the snapshot property is populated with\n        last saved data.\n      </p>\n      <FormContainer formBuilder={formBuilder}>\n        <div className="w-full flex flex-col gap-2">\n          <div className="font-bold">Widget Form</div>\n          <Grid>\n            <Grid.Col span={12}>\n              <Field name="Name" />\n            </Grid.Col>\n          </Grid>\n          <div>Snapshot Name field: {formBuilder.snapshot?.Name}</div>\n          <div className="w-full flex flex-col">\n            <SaveButton\n              onPostSave={(operation, id, data) => {\n                formBuilder.setSnapshot(data);\n              }}\n            />\n          </div>\n        </div>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default FormBuilderSnapshot;\n\n',language:"tsx"})]}),{}),id:5e3},{title:"Data",component:(0,a.jsx)(()=>{var e;let n=(0,i.Z)({tableName:"Widget"});return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The data property on the formBuilder object contains the form data. The data property is updated as the user interacts with the form."}),(0,a.jsx)(o.Z,{formBuilder:n,children:(0,a.jsxs)("div",{className:"w-full flex flex-col gap-2",children:[(0,a.jsx)("div",{className:"font-bold",children:"Widget Form"}),(0,a.jsx)(d.r,{children:(0,a.jsx)(d.r.Col,{span:12,children:(0,a.jsx)(s.Z,{name:"Name"})})}),(0,a.jsxs)("div",{children:["The widget name will be: ",null===(e=n.data)||void 0===e?void 0:e.Name]}),(0,a.jsx)(r.Z,{})]})})]})},{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { useFormBuilder, FormContainer, Field, SaveButton } from "@ixeta/xams";\nimport { Grid } from "@mantine/core";\nimport React from "react";\n\nconst FormBuilder = () => {\n  const formBuilder = useFormBuilder<any>({\n    tableName: "Widget",\n  });\n  return (\n    <>\n      <p>\n        The data property on the formBuilder object contains the form data. The\n        data property is updated as the user interacts with the form.\n      </p>\n      <FormContainer formBuilder={formBuilder}>\n        <div className="w-full flex flex-col gap-2">\n          <div className="font-bold">Widget Form</div>\n          <Grid>\n            <Grid.Col span={6}>\n              <Field name="Name" />\n            </Grid.Col>\n          </Grid>\n          <div>The widget name will be: {formBuilder.data?.Name}</div>\n          <SaveButton />\n        </div>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default FormBuilder;\n\n',language:"tsx"})]}),{}),id:6e3}],W=[{title:"Textarea",component:(0,a.jsx)(()=>{let e=(0,i.Z)({tableName:"Widget"});return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The varient prop can be set to textarea to render a textarea input field."}),(0,a.jsx)(o.Z,{formBuilder:e,children:(0,a.jsxs)("div",{className:"w-full flex flex-col gap-2",children:[(0,a.jsx)("div",{className:"font-bold",children:"Widget Form"}),(0,a.jsx)(s.Z,{name:"Name",varient:"textarea"}),(0,a.jsx)("div",{className:"w-full flex flex-col ",children:(0,a.jsx)(r.Z,{})})]})})]})},{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { useFormBuilder, FormContainer, Field, SaveButton } from "@ixeta/xams";\nimport { Grid } from "@mantine/core";\nimport React from "react";\n\nconst FieldTextarea = () => {\n  const formBuilder = useFormBuilder({\n    tableName: "Widget",\n  });\n  return (\n    <>\n      <p>\n        The varient prop can be set to textarea to render a textarea input\n        field.\n      </p>\n      <FormContainer formBuilder={formBuilder}>\n        <div className="w-full flex flex-col gap-2">\n          <div className="font-bold">Widget Form</div>\n          <Field name="Name" varient="textarea" />\n          <div className="w-full flex flex-col ">\n            <SaveButton />\n          </div>\n        </div>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default FieldTextarea;\n\n',language:"tsx"})]}),{}),id:7e3},{title:"Rich Text",component:(0,a.jsx)(()=>{let e=(0,i.Z)({tableName:"Widget"});return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The varient prop can be set to rich to render a rich text input field."}),(0,a.jsx)(o.Z,{formBuilder:e,children:(0,a.jsxs)("div",{className:"w-full flex flex-col gap-2",children:[(0,a.jsx)("div",{className:"font-bold",children:"Widget Form"}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(s.Z,{name:"Name",varient:"rich"})}),(0,a.jsx)("div",{className:"w-full flex flex-col ",children:(0,a.jsx)(r.Z,{})})]})})]})},{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { useFormBuilder, FormContainer, Field, SaveButton } from "@ixeta/xams";\nimport { Grid } from "@mantine/core";\nimport React from "react";\n\nconst FieldRichText = () => {\n  const formBuilder = useFormBuilder({\n    tableName: "Widget",\n  });\n  return (\n    <>\n      <p>\n        The varient prop can be set to rich to render a rich text input field.\n      </p>\n      <FormContainer formBuilder={formBuilder}>\n        <div className="w-full flex flex-col gap-2">\n          <div className="font-bold">Widget Form</div>\n          <div className="w-full h-96">\n            <Field name="Name" varient="rich" />\n          </div>\n          <div className="w-full flex flex-col ">\n            <SaveButton />\n          </div>\n        </div>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default FieldRichText;\n\n',language:"tsx"})]}),{}),id:7100},{title:"On Change",component:(0,a.jsx)(()=>{let e=(0,i.Z)({tableName:"Widget"});return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The onChange prop can be set to a function that will be called when the value of the field changes."}),(0,a.jsx)(o.Z,{formBuilder:e,children:(0,a.jsxs)("div",{className:"w-full flex flex-col gap-2",children:[(0,a.jsx)("div",{className:"font-bold",children:"Widget Form"}),(0,a.jsx)(s.Z,{name:"Name",onChange:e=>{console.log(e)}}),(0,a.jsx)("div",{className:"w-full flex flex-col ",children:(0,a.jsx)(r.Z,{})})]})})]})},{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { useFormBuilder, FormContainer, Field, SaveButton } from "@ixeta/xams";\nimport { Grid } from "@mantine/core";\nimport React from "react";\n\nconst FieldOnChange = () => {\n  const formBuilder = useFormBuilder({\n    tableName: "Widget",\n  });\n  return (\n    <>\n      <p>\n        The onChange prop can be set to a function that will be called when the\n        value of the field changes.\n      </p>\n      <FormContainer formBuilder={formBuilder}>\n        <div className="w-full flex flex-col gap-2">\n          <div className="font-bold">Widget Form</div>\n          <Field\n            name="Name"\n            onChange={(value) => {\n              console.log(value);\n            }}\n          />\n          <div className="w-full flex flex-col ">\n            <SaveButton />\n          </div>\n        </div>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default FieldOnChange;\n\n',language:"tsx"})]}),{}),id:7200}],C=[{title:"DataTable",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The DataTable component allows for the display of data in a table format. New records can be created by clicking the + button. The DataTable supports searching, paging, deletion, and creation."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget"})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTables = () => {\n  return (\n    <>\n      <p>\n        The DataTable component allows for the display of data in a table\n        format. New records can be created by clicking the + button. The\n        DataTable supports searching, paging, deletion, and creation.\n      </p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" />\n      </div>\n    </>\n  );\n};\n\nexport default DataTables;\n\n',language:"tsx"})]}),{}),id:1e4},{title:"Title",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The DataTable title can be customized by setting the title prop."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",title:"My Widgets"})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableTitle = () => {\n  return (\n    <>\n      <p>The DataTable title can be customized by setting the title prop.</p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" title="My Widgets" />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableTitle;\n',language:"tsx"})]}),{}),id:10500},{title:"Fields",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"You can specify the DataTable fields and their ordering by using the fields prop."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",fields:["Price","Name"]})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableFields = () => {\n  return (\n    <>\n      <p>\n        You can specify the DataTable fields and their ordering by using the\n        fields prop.\n      </p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" fields={["Price", "Name"]} />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableFields;\n',language:"tsx"})]}),{}),id:11e3},{title:"Custom Columns",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"Custom fields can be added to the DataTable component by passing an array of field objects to the fields prop. Each field object must contain a header and body property. The header property can be a string or a function that returns a React node. The body property must be a function that returns a React node."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",fields:["Name",{header:"My Field 1",body:e=>(0,a.jsx)("div",{className:" bg-blue-300",children:e.Name})},{header:()=>(0,a.jsx)("div",{className:"bg-red-300",children:"My Field 2"}),body:e=>(0,a.jsx)("div",{className:" bg-green-300",children:e.Name})}]})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableCustomFields = () => {\n  return (\n    <>\n      <p>\n        Custom fields can be added to the DataTable component by passing an\n        array of field objects to the fields prop. Each field object must\n        contain a header and body property. The header property can be a string\n        or a function that returns a React node. The body property must be a\n        function that returns a React node.\n      </p>\n      <div className="w-full h-96">\n        <DataTable\n          tableName="Widget"\n          fields={[\n            "Name",\n            {\n              header: "My Field 1",\n              body: (record) => {\n                return <div className=" bg-blue-300">{record.Name}</div>;\n              },\n            },\n            {\n              header: () => <div className="bg-red-300">My Field 2</div>,\n              body: (record) => {\n                return <div className=" bg-green-300">{record.Name}</div>;\n              },\n            },\n          ]}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableCustomFields;\n',language:"tsx"})]}),{}),id:11250},{title:"Column Widths",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"Column widths can be set using the columnWidths prop. The first column width is set to 100px and the second column width is set to 100%."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",columnWidths:["100px","100%"]})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableColumnWidths = () => {\n  return (\n    <>\n      <p>\n        Column widths can be set using the columnWidths prop. The first column\n        width is set to 100px and the second column width is set to 100%.\n      </p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" columnWidths={["100px", "100%"]} />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableColumnWidths;\n\n',language:"tsx"})]}),{}),id:11500},{title:"Custom Create Button",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The customCreateButton prop can be used to customize the create button that opens the form to create a new record."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",customCreateButton:e=>(0,a.jsx)(c.z,{onClick:e,children:"CREATE!"})})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport { Button } from "@mantine/core";\nimport React from "react";\n\nconst DataTableCreateButton = () => {\n  return (\n    <>\n      <p>\n        The customCreateButton prop can be used to customize the create button\n        that opens the form to create a new record.\n      </p>\n      <div className="w-full h-96">\n        <DataTable\n          tableName="Widget"\n          customCreateButton={(open) => {\n            return <Button onClick={open}>CREATE!</Button>;\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableCreateButton;\n',language:"tsx"})]}),{}),id:11750},{title:"Filters",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The filters prop on the DataTable component allows for the filtering of records based on the provided criteria. In this example, the DataTable is filtered to show only records where the Price is greater than 10."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",filters:[{field:"Price",operator:">",value:"10"}]})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'\nimport { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableFilters = () => {\n  return (\n    <>\n      <p>\n        The filters prop on the DataTable component allows for the filtering of\n        records based on the provided criteria. In this example, the DataTable\n        is filtered to show only records where the Price is greater than 10.\n      </p>\n      <div className="w-full h-96">\n        <DataTable\n          tableName="Widget"\n          filters={[\n            {\n              field: "Price",\n              operator: ">",\n              value: "10",\n            },\n          ]}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableFilters;\n',language:"tsx"})]}),{}),id:12e3},{title:"Order",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The data can be sorted by clicking on the column headers. The default order can be set using the `orderBy` prop."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",orderBy:[{field:"Price",order:"asc"}]})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableOrder = () => {\n  return (\n    <>\n      <p>\n        The data can be sorted by clicking on the column headers. The default\n        order can be set using the orderBy prop.\n      </p>\n      <div className="w-full h-96">\n        <DataTable\n          tableName="Widget"\n          orderBy={[\n            {\n              field: "Price",\n              order: "asc",\n            },\n          ]}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableOrder;\n',language:"tsx"})]}),{}),id:13e3},{title:"Max Results",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The maxResults prop can be used to limit the number of records displayed."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",maxResults:5})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableMaxResults = () => {\n  return (\n    <>\n      <p>\n        The maxResults prop can be used to limit the number of records\n        displayed.\n      </p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" maxResults={5} />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableMaxResults;\n\n',language:"tsx"})]}),{}),id:14e3},{title:"Disable",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The DataTable can be disabled by setting the disabledMessage prop."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",disabledMessage:"This table is disabled."})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableEvents = () => {\n  return (\n    <>\n      <p>\n        The DataTable component provides several events that can be used to\n        interact with the data. These events can be used to execute code when\n        the data is loaded, when a row is clicked, when a page is changed, and\n        when a record is deleted.\n      </p>\n      <div className="w-full h-96">\n        <DataTable\n          tableName="Widget"\n          // Executes once on mount\n          onInitialLoad={(records) => {\n            console.log("initial load", records);\n          }}\n          // Executes every time the data is loaded\n          onDataLoaded={(records) => {\n            console.log("data loaded", records);\n          }}\n          onPostDelete={(record) => {\n            console.log("post delete", record.Name);\n          }}\n          onRowClick={(record) => {\n            console.log("row click", record);\n            return true; // Open the form, false to not open the form\n          }}\n          onPageChange={(pageNumber) => {\n            console.log("page change", pageNumber);\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableEvents;\n\n\n',language:"tsx"})]}),{}),id:15e3},{title:"Searchable",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"Search can be disabled by setting the searchable prop to false. The search bar will not be displayed."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",searchable:!1})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableSearchable = () => {\n  return (\n    <>\n      <p>\n        Search can be disabled by setting the searchable prop to false. The\n        search bar will not be displayed.\n      </p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" searchable={false} />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableSearchable;\n',language:"tsx"})]}),{}),id:16e3},{title:"Confirm Delete",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The delete confirmation message can be disabled by setting the confirmDelete prop to false."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",confirmDelete:!1})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableConfirmDelete = () => {\n  return (\n    <>\n      <p>\n        The delete confirmation message can be disabled by setting the\n        confirmDelete prop to false.\n      </p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" confirmDelete={false} />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableConfirmDelete;\n\n',language:"tsx"})]}),{}),id:17e3},{title:"Confirm Delete Message",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The deleteConfirmation prop can be used to customize the delete confirmation message."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",deleteConfirmation:async e=>({title:"Delete Widget?",message:"Are you sure you want to delete the widget ".concat(e.Name,"?")})})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableConfirmDeleteMessage = () => {\n  return (\n    <>\n      <p>\n        The deleteConfirmation prop can be used to customize the delete\n        confirmation message.\n      </p>\n      <div className="w-full h-96">\n        <DataTable\n          tableName="Widget"\n          deleteConfirmation={async (data) => {\n            return {\n              title: "Delete Widget?",\n              message: `Are you sure you want to delete the widget ${data.Name}?`,\n            };\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableConfirmDeleteMessage;\n\n',language:"tsx"})]}),{}),id:18e3},{title:"Scrollable",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"If the scrollable prop is set to false, the DataTable will not be scrollable. The height of the DataTable will be determined by the number of records displayed."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",scrollable:!1})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableScrollable = () => {\n  return (\n    <>\n      <p>\n        If the scrollable prop is set to false, the DataTable will not be\n        scrollable. The height of the DataTable will be determined by the number\n        of records displayed.\n      </p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" scrollable={false} />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableScrollable;\n',language:"tsx"})]}),{}),id:19e3},{title:"Events",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The DataTable component provides several events that can be used to interact with the data. These events can be used to execute code when the data is loaded, when a row is clicked, when a page is changed, and when a record is deleted."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",onInitialLoad:e=>{console.log("initial load",e)},onDataLoaded:e=>{console.log("data loaded",e)},onPostDelete:e=>{console.log("post delete",e.Name)},onRowClick:e=>(console.log("row click",e),!0),onPageChange:e=>{console.log("page change",e)}})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableEvents = () => {\n  return (\n    <>\n      <p>\n        The DataTable component provides several events that can be used to\n        interact with the data. These events can be used to execute code when\n        the data is loaded, when a row is clicked, when a page is changed, and\n        when a record is deleted.\n      </p>\n      <div className="w-full h-96">\n        <DataTable\n          tableName="Widget"\n          // Executes once on mount\n          onInitialLoad={(records) => {\n            console.log("initial load", records);\n          }}\n          // Executes every time the data is loaded (Page change, sort, filter, etc.)\n          onDataLoaded={(records) => {\n            console.log("data loaded", records);\n          }}\n          onPostDelete={(record) => {\n            console.log("post delete", record.Name);\n          }}\n          onRowClick={(record) => {\n            console.log("row click", record);\n            return true; // Open the form, false to not open the form\n          }}\n          onPageChange={(pageNumber) => {\n            console.log("page change", pageNumber);\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableEvents;\n\n',language:"tsx"})]}),{}),id:2e4},{title:"Disable Create  Update  Delete",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The canCreate, canDelete, and canUpdate props can be used disable the ability to create, delete, and update records in the DataTable component."}),(0,a.jsx)("p",{children:"By default, all three are set to true. In this example, we set all three to false to disable the ability to create, delete, and update records."}),(0,a.jsx)("p",{children:"Security is not enforced on the server side, so it is important to implement proper security measures on the server side to prevent unauthorized access to the data."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",canCreate:!1,canDelete:!1,canUpdate:!1})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DataTableCUD = () => {\n  return (\n    <>\n      <p>\n        The canCreate, canDelete, and canUpdate props can be used to control\n        permissions for the DataTable component. By default, all three are set\n        to true. In this example, we set all three to false to disable the\n        ability to create, delete, and update records.\n      </p>\n      <div className="w-full h-96">\n        <DataTable\n          tableName="Widget"\n          canCreate={false}\n          canDelete={false}\n          canUpdate={false}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DataTableCUD;',language:"tsx"})]}),{}),id:21e3}],D=[{title:"Fields",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The fields displayed in the DataTable form can be customized by passing an array of field names to the formFields prop."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",formFields:["Price"]})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DTFormFields = () => {\n  return (\n    <>\n      <p>\n        The fields displayed in the DataTable form can be customized by passing\n        an array of field names to the formFields prop.\n      </p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" formFields={["Price"]} />\n      </div>\n    </>\n  );\n};\n\nexport default DTFormFields;\n\n',language:"tsx"})]}),{}),id:3e4},{title:"Title",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The formTitle prop can be used to customize the title of the form that opens when clicking the Add button or on a row."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",formTitle:"Make a Widget!"})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DTFormTitle = () => {\n  return (\n    <>\n      <p>\n        The formTitle prop can be used to customize the title of the form that\n        opens when clicking the Add button or on a row.\n      </p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" formTitle="Make a Widget!" />\n      </div>\n    </>\n  );\n};\n\nexport default DTFormTitle;\n\n',language:"tsx"})]}),{}),id:31e3},{title:"Defaults",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The formFieldDefaults prop can be used to set default values for the form fields on create. This works even if the fields are hidden."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",formFieldDefaults:[{field:"Price",value:100}]})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DTFormDefaults = () => {\n  return (\n    <>\n      <p>\n        The formFieldDefaults prop can be used to set default values for the\n        form fields on create. This works even if the fields are hidden.\n      </p>\n      <div className="w-full h-96">\n        <DataTable\n          tableName="Widget"\n          formFieldDefaults={[\n            {\n              field: "Price",\n              value: 100,\n            },\n          ]}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DTFormDefaults;\n\n',language:"tsx"})]}),{}),id:32e3},{title:"Close Options",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The formCloseOnCreate, formCloseOnEscape, and formCloseOnUpdate props can be used to control the behavior of the form when creating, updating, or when the escape key is pressed. By default, the form will close after creating or updating a record, and when the escape key is pressed."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",formCloseOnCreate:!1,formCloseOnEscape:!1,formCloseOnUpdate:!1})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DTFormCloseOptions = () => {\n  return (\n    <>\n      <p>\n        The formCloseOnCreate, formCloseOnEscape, and formCloseOnUpdate props\n        can be used to control the behavior of the form when creating, updating,\n        or when the escape key is pressed. By default, the form will close after\n        creating or updating a record, and when the escape key is pressed.\n      </p>\n      <div className="w-full h-96">\n        <DataTable\n          tableName="Widget"\n          formCloseOnCreate={false}\n          formCloseOnEscape={false}\n          formCloseOnUpdate={false}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DTFormCloseOptions;\n',language:"tsx"})]}),{}),id:33e3},{title:"Z Index",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"You might need to adjust the formZIndex prop if the form is not appearing above other elements on the page."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",formZIndex:100})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DTFormZIndex = () => {\n  return (\n    <>\n      <p>\n        You might need to adjust the formZIndex prop if the form is not\n        appearing above other elements on the page.\n      </p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" formZIndex={100} />\n      </div>\n    </>\n  );\n};\n\nexport default DTFormZIndex;\n\n',language:"tsx"})]}),{}),id:34e3},{title:"Maximum Width",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The formMaxWidth prop can be used to set the maximum width of the form in rem."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",formMaxWidth:50})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DTFormMinWidth = () => {\n  return (\n    <>\n      <p>\n        The formMinWidth prop can be used to set the minimum width of the form.\n      </p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" formMinWidth={500} />\n      </div>\n    </>\n  );\n};\n\nexport default DTFormMinWidth;\n',language:"tsx"})]}),{}),id:35e3},{title:"Hide Save Button",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The formHideSaveButton prop can be used to hide the save button on the form that opens when clicking the Add button or on a row."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",formHideSaveButton:!0})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DTFormTitle = () => {\n  return (\n    <>\n      <p>\n        The formHideSaveButton prop can be used to hide the save button on the\n        form that opens when clicking the Add button or on a row.\n      </p>\n      <div className="w-full h-96">\n        <DataTable tableName="Widget" formHideSaveButton={true} />\n      </div>\n    </>\n  );\n};\n\nexport default DTFormTitle;\n',language:"tsx"})]}),{}),id:36e3},{title:"Events",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The formOnClose, formOnOpen, formOnPreSave, and formOnPostSave events can be used to interact with the form that opens when clicking the Add button or on a row."}),(0,a.jsx)("p",{children:"The formOnClose event is called when the form is closed. The formOnOpen event is called when the form is opened. The formOnPreSave event is called before the form is saved. The formOnPostSave event is called after the form is saved."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",formOnClose:()=>{console.log("Form closed")},formOnOpen:(e,n)=>{console.log("Form opened",e,n)},formOnPreSave:e=>{console.log("Form pre save",e)},formOnPostSave:(e,n)=>{console.log("Form post save",e,n)}})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable } from "@ixeta/xams";\nimport React from "react";\n\nconst DTFormEvents = () => {\n  return (\n    <>\n      <p>\n        The formOnClose, formOnOpen, formOnPreSave, and formOnPostSave events\n        can be used to interact with the form that opens when clicking the Add\n        button or on a row.\n      </p>\n      <p>\n        The formOnClose event is called when the form is closed. The formOnOpen\n        event is called when the form is opened. The formOnPreSave event is\n        called before the form is saved. The formOnPostSave event is called\n        after the form is saved.\n      </p>\n      <div className="w-full h-96">\n        <DataTable\n          tableName="Widget"\n          formOnClose={() => {\n            console.log("Form closed");\n          }}\n          formOnOpen={(operation, record) => {\n            // Operation is either "CREATE" or "UPDATE"\n            console.log("Form opened", operation, record);\n          }}\n          formOnPreSave={(submissionData) => {\n            console.log("Form pre save", submissionData);\n          }}\n          formOnPostSave={(operation, record) => {\n            // Operation is either "CREATE" or "UPDATE"\n            console.log("Form post save", operation, record);\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DTFormEvents;\n\n\n',language:"tsx"})]}),{}),id:37e3},{title:"Custom Form",component:(0,a.jsx)(()=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"The customForm prop can be used to customize the form that opens when clicking the Add button or on a row."}),(0,a.jsx)("div",{className:"w-full h-96",children:(0,a.jsx)(j.Z,{tableName:"Widget",customForm:(e,n)=>{var t;return(0,a.jsxs)("div",{className:"w-full flex flex-col gap-2",children:[(0,a.jsx)(s.Z,{name:"Name"}),(0,a.jsxs)("div",{children:["The name of this widget will be: ",null===(t=e.data)||void 0===t?void 0:t.Name]}),(0,a.jsxs)("div",{className:"w-full flex gap-2",children:[(0,a.jsx)(c.z,{onClick:n.close,children:"Close"}),(0,a.jsx)(r.Z,{})]})]})}})})]}),{}),codeComponent:(0,a.jsx)(()=>(0,a.jsxs)("div",{className:"w-full flex flex-col",children:["c#",(0,a.jsx)(F,{codeBlock:'[Table("Widget")]\npublic class Widget\n{\n    public Guid WidgetId { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}',language:"csharp"}),"React",(0,a.jsx)(F,{codeBlock:'import { DataTable, Field, SaveButton } from "@ixeta/xams";\nimport { Button } from "@mantine/core";\nimport React from "react";\n\nconst DTFormCustom = () => {\n  return (\n    <>\n      <p>\n        The customForm prop can be used to customize the form that opens when\n        clicking the Add button or on a row.\n      </p>\n      <div className="w-full h-96">\n        <DataTable\n          tableName="Widget"\n          customForm={(formBuilder, disclosure) => {\n            return (\n              <div className="w-full flex flex-col">\n                <Field name="Name" />\n                <div>\n                  The name of this widget will be: {formBuilder.data?.Name}\n                </div>\n                <div className="w-full flex gap-2">\n                  <Button onClick={disclosure.close}>Close</Button>\n                  <SaveButton />\n                </div>\n              </div>\n            );\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DTFormCustom;\n\n',language:"tsx"})]}),{}),id:38e3}];function k(){var e;let n=(0,h.useRouter)(),t=parseInt(null!==(e=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:window.location.href,t=RegExp("[?&]"+(e=e.replace(/[\[\]]/g,"\\$&"))+"(=([^&#]*)|&|#|$)").exec(n);return t?t[2]?decodeURIComponent(t[2].replace(/\+/g," ")):"":null}("id",n.asPath))&&void 0!==e?e:"100"),i=(0,g.Z)(),o=(0,l.useMemo)(()=>[...B,...W,...C,...D],[]),s=o.find(e=>e.id===t);return((0,l.useEffect)(()=>{void 0===s&&n.push("/?id=".concat(o[0].id))},[s,o,n]),s)?(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("div",{className:"w-full flex justify-between p-2",children:[(0,a.jsx)(x,{formExamples:B,formFieldsExamples:W,dataTableExamples:C,dataTableFormExamples:D}),(0,a.jsxs)("div",{className:"flex gap-4 items-center mr-2",children:[(0,a.jsx)(b.Z,{}),(0,a.jsx)("a",{href:"https://xams.io",children:"dark"===i.colorScheme?(0,a.jsx)(N(),{src:"/logo_dark.svg",alt:"logo",width:128,height:40}):(0,a.jsx)(N(),{src:"/logo_light.svg",alt:"logo",width:128,height:40})})]})]}),(0,a.jsx)("div",{className:"w-full flex justify-center items-center",children:(0,a.jsxs)("div",{className:"flex flex-col self-start px-2 max-w-lg",children:[(0,a.jsxs)("div",{className:"w-full flex justify-between items-center",children:[(0,a.jsx)("h1",{className:"text-xl font-bold",children:s.title}),(0,a.jsx)(T,{example:s.codeComponent})]}),(0,a.jsx)("div",{className:" w-full",children:s.component}),(0,a.jsxs)("div",{className:"w-full flex justify-between",children:[(0,a.jsx)(c.z,{variant:"subtle",onClick:()=>{let e=o.slice().reverse().find(e=>e.id<t);e&&n.push("/?id=".concat(e.id))},children:"Prev"}),(0,a.jsx)(c.z,{variant:"subtle",onClick:()=>{let e=o.find(e=>e.id>t);e?n.push("/?id=".concat(e.id)):n.push("/?id=".concat(o[0].id))},children:"Next"})]})]})})]}):null}},5299:function(e,n,t){"use strict";var a=t(4246),l=t(7378),i=t(7628);let o=l.lazy(()=>Promise.all([t.e(932),t.e(698),t.e(786),t.e(93),t.e(879)]).then(t.bind(t,9879))),s=(0,l.forwardRef)((e,n)=>{let[t,s]=(0,l.useState)(!1),r=l.useRef(null);if((0,l.useImperativeHandle)(n,()=>r.current),(0,l.useEffect)(()=>{s(!0)},[]),!t)return(0,a.jsx)("div",{className:"w-full h-full flex justify-center items-center",children:(0,a.jsx)(i.a,{})});let d=e.tableName+JSON.stringify(e.filters)+JSON.stringify(e.joins)+JSON.stringify(e.orderBy)+JSON.stringify(e.except)+JSON.stringify(e.additionalFields)+JSON.stringify(e.fields)+JSON.stringify(e.maxResults);return(0,a.jsx)(o,{ref:r,...e},d)});n.Z=s},9354:function(e,n,t){"use strict";var a=t(4246),l=t(7302),i=t(823),o=t(6164),s=t(8540),r=t(4215);t(7378),n.Z=()=>{let e=(0,l.rZ)(),{colorScheme:n,toggleColorScheme:t}=(0,i.X)(),d="dark"===n;return(0,a.jsx)(o.A,{variant:"outline",color:d?"yellow":e.fn.primaryColor(),onClick:()=>t(),title:"Toggle color scheme",children:d?(0,a.jsx)(s.Z,{size:"1.1rem"}):(0,a.jsx)(r.Z,{size:"1.1rem"})})}}},function(e){e.O(0,[932,293,93,888,774,179],function(){return e(e.s=9536)}),_N_E=e.O()}]);